LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_Arith.ALL;
USE IEEE.STD_LOGIC_Unsigned.ALL;
ENTITY ex_ylx IS
 	PORT(
		SWB 	: IN   STD_LOGIC; 		--选择不同的控制台模式
		SWA		: IN   STD_LOGIC;		
		SWC		: IN   STD_LOGIC;		
		M   	: OUT  STD_LOGIC;		--M和S用于控制ALU的算术逻辑运算类型
		S   	: OUT  STD_LOGIC_VECTOR(3 DOWNTO 0); --S3,S2,S1,S0	   
		CIN		: OUT  STD_LOGIC;		--进位
		SEL3    : OUT  STD_LOGIC; 		--SEL3SEL2用来选择送往ALU A端口的寄存器，SEL2SEL0用来选择送往ALU B端口的寄存器
		SEL2	: OUT  STD_LOGIC;
		SEL1	: OUT  STD_LOGIC;
		SEL0	: OUT  STD_LOGIC;
		CLR 	: IN   STD_LOGIC;		--复位,低电平有效	
		C		: IN   STD_LOGIC;		--进位标志 
		Z		: IN   STD_LOGIC;		--结果为零标志
		IRH		: IN   STD_LOGIC_VECTOR(3 DOWNTO 0); --IR7~IR4，指令操作码
		T3		: IN   STD_LOGIC;		--T3节拍脉冲
		W1		: IN   STD_LOGIC;		--W1节拍电位
		W2		: IN   STD_LOGIC;		--W2节拍电位
		W3  	: IN   STD_LOGIC;		--W3节拍电位
		SELCTL  : OUT  STD_LOGIC;		--为1时处于控制台操作，为0时处于运行程序状态
		DRW    	: OUT  STD_LOGIC;		--为1时在T3上升沿将DBUS上的数据写入SEL3SEL2选中的寄存器
		ABUS 	: OUT  STD_LOGIC;		--为1时运算器结果送数据总线DBUS
		SBUS    : OUT  STD_LOGIC;		--为1时将开关数据送数据总线DBUS
		LIR     : OUT  STD_LOGIC;		--为1时将DBUS上的指令写入AR
		MBUS    : OUT  STD_LOGIC;		--为1时将双端口RAM左端口数据送到DBUS
		MEMW    : OUT  STD_LOGIC;		--为1时在T2为1期间将DBUS写入AR指定的存储器单元，为0时读存储器
		LAR     : OUT  STD_LOGIC;		--为1时在T3的上升沿将DBUS的地址打入AR
		LPC     : OUT  STD_LOGIC; 		--为1时在T3的上升沿将DBUS的数据写入PC
		LDC		: OUT  STD_LOGIC;		--为1时T3的上升沿保存进位
		LDZ     : OUT  STD_LOGIC;		--为1时T3的上升沿保存结果为0标志	
		ARINC   : OUT  STD_LOGIC;		--为1时在T3的上升沿AR加1
		PCINC   : OUT  STD_LOGIC;		--为1时在T3的上升沿PC加1
		PCADD	: OUT  STD_LOGIC;		--PC加上偏移量
		LONG	: OUT  STD_LOGIC;		--标志指令还需要第三个节拍电位W3
		SHORT   : OUT  STD_LOGIC;		--标志指令不需要第二个节拍电位W2
		STOP	: BUFFER STD_LOGIC		--暂停使得可以观察控制台的指示灯等
	);
END ex_ylx;

ARCHITECTURE behavior OF ex_ylx IS 
	SIGNAL ST0,SST0:std_logic;
    SIGNAL SWCBA:std_logic_vector(2 DOWNTO 0);
    SIGNAL FLAG:std_logic:='0';
BEGIN
	SWCBA <= SWC & SWB & SWA;
	PROCESS(CLR,T3)
		IF(CLR='0') THEN
			ST0 <='0';
	ELSIF(T3'EVENT AND T3='0') THEN
		IF(SST0='1') THEN
			ST0 <='1';
		END IF;
		IF(ST0='1' AND W2='1' AND SWCBA="100") THEN
			ST0 <='0';
		END IF;
	END IF;
	END PROCESS;
	
	PROCESS(SWCBA, IRH, W1, W2, W3, ST0, C, Z) 
	BEGIN
	   --给信号设置默认值
	   SHORT 	<= '0';
	   LONG		<= '0';
	   CIN		<= '0';
	   SELCTL   <= '0';
	   ABUS     <= '0';
	   SBUS	    <= '0';
	   MBUS		<= '0';
	   M        <= '0';
	   S        <= "0000";
	   SEL3		<= '0';
	   SEL2		<= '0';
	   SEL1     <= '0'; 
	   SEL0		<= '0';
	   DRW      <= '0';
	   SBUS     <= '0';
	   LIR      <= '0';
	   MEMW     <= '0';
	   LAR      <= '0';
	   PCADD	<= '0';
	   ARINC    <= '0';
	   LPC      <= '0';
	   LDZ		<= '0';
	   LDC		<= '0';
	   STOP	    <= '0';
	   PCINC	<= '0';
	   SST0		<= '0';
	   
	   CASE SWCBA IS
			WHEN "100" =>  --写寄存器
				SST0 <= W2; 
				SBUS <= '1';
				STOP <= '1';
				DRW <= '1';
				SEL3 <= (ST0 AND W1) OR (ST0 AND W2);
				SEL2 <= W2;
				SEL1<= (NOT ST0 AND	W1) OR (ST0 AND W2);
				SEL0 <= W1; 
				SELCTL	 <= '1';
			WHEN "011" =>	--读寄存器
				STOP <='1';
				SEL3 <= W2;
				SEL2 <= '0';
				SEL1<= W2;
				SEL0 <='1';
				SELCTL	 <= '1';
			WHEN "010" =>	--读存储器
				SBUS <= NOT ST0 AND W1;
				LAR <= NOT ST0 AND W1;
				SST0 <= NOT ST0 AND W1;
				SHORT <= '1';
				MBUS <= ST0 AND W1;
				ARINC <= W1 AND ST0;
				SELCTL	 <= '1';
				STOP <= W1;
			WHEN "001" =>	--写存储器
				SST0 <= NOT ST0 AND W1;
				SBUS <= W1;
				STOP <= W1;
				LAR  <= NOT ST0 AND W1;
				SHORT <= W1;
				MEMW <= ST0 AND W1;
				ARINC <= ST0 AND W1;
				SELCTL <= '1';
			WHEN "000" =>   --执行指令，因为是采用流水线，所以不对所有指令统一用一个单独的节拍电位来进行取值和执行指令
				---使得可以从设置的地址处开始执行指令
				SBUS	<=(NOT ST0)AND W1;
				LPC		<=(NOT ST0)AND W1;
				SHORT	<=(NOT ST0)AND W1;
				SST0	<=(NOT ST0)AND W1;
				CASE IRH IS  --指令处理
					WHEN "0000" =>  --NOP
						LIR <= W1 AND ST0;
						PCINC <= W1 AND ST0;
						SHORT <= W1;
					WHEN "0001" =>	--ADD			
						SHORT<=W1;		--因为所有微操作都可以在一个节拍电位中执行，只有加载下一条指令时需要占用DBUS，所以没必要占用第二个节拍电位
						S <= "1001";
						CIN <= W1;
						ABUS <= W1;
						DRW <= W1;
						LDZ <= W1;
						LDC <= W1;
						LIR <= W1;  		--取下一条指令不占用DBUS而是单独的数据通路，所以一定可以将取值附在最后一个节拍电位
						PCINC <= W1;
						SHORT <= W1;
					WHEN "0010" =>	--SUB，同理所有微操作都相容，
						SHORT<=W1;	--同上
						S <= "0110";
						ABUS <= W1;
						DRW <= W1;
						LDZ <= W1;
						LDC <= W1;
						LIR <= W1;
						PCINC <= W1;
						SHORT<= W1;
					WHEN "0011" =>	--AND
						SHORT<=W1;
						S <= "1011";
						M<=W1;
						ABUS <= W1;
						DRW <= W1;
						LDZ <= W1;
						LIR <= W1;
						PCINC <= W1;
						SHORT<= W1;
					WHEN "0100" =>	--INC
						S <= "0000";
						ABUS <= W1;		--将自增后的结果送至DBUS再存储到相应的寄存器中需要占用DBUS，所以需要一个节拍电位
						DRW <= W1;
						LDZ <= W1;
						LDC <= W1;
						LIR <= W1;
						PCINC <= W1;
						SHORT<= W1;
					WHEN "0101" => --LD
						LAR <= W1;  --出现问题，划分成了3拍					
						M <= W1;	--W1取数，W2把数存入目的寄存器，W3取下一条指令并让PC指向下下条指令
						S <= "1010";
						ABUS <= W1;
						LIR <= W3;
						PCINC<=W3;
						LONG<='1';
						DRW <= W2;
						MBUS <= W2;
					WHEN "0110" =>	--ST
						LAR <= W1;				--将目的存储单元的地址存入AR，需要占用DBUS，所以需要一个节拍电位
						M <= W1 OR W2;
						if W1 = '1' then
							S <= "1111";
						end if;
						if W2 = '1' then 
							S <= "1010";
						end if;
						ABUS <= W1 OR W2;
						MEMW <= W2;				--将DBUS上的数据写入内存单元，所以需要一个节拍电位。
						--LONG <= '1';		
						LIR <= W2;				
						PCINC <= W2;
					WHEN "0111" =>	--JC
						PCADD <= W1 AND C;				--当C有效时需要将PC加上新的偏移量得到新的PC
						LIR <= ((NOT C)AND W1) OR W2;  	--当不需要跳转时直接在W1根据PC的值都下一条指令，当需要跳转时需要等到PC的值改变后再在W2取指
						PCINC <= ((NOT C)AND W1) OR W2;	--当不需要跳转时PC在W1直接可以自增，当需要跳转时要等到PC变为新的地址后再自增
						SHORT<=(NOT C)AND W1;			--若不需要跳转则只需要一个节拍电位
						--LIR <= W1;
						--PCINC <= W1
						--SHORT <= W1
					WHEN "1000" =>	--JZ
						PCADD <= W1 AND Z;				--当Z有效时需要将PC加上新的偏移量得到新的PC
						LIR <= ((NOT Z)AND W1) OR W2;  	--当不需要跳转时直接在W1根据PC的值都下一条指令，当需要跳转时需要等到PC的值改变后再在W2取指
						PCINC <= ((NOT Z)AND W1) OR W2;	--当不需要跳转时PC在W1直接可以自增，当需要跳转时要等到PC变为新的地址后再自增
						SHORT<= (NOT Z)AND W1;			--若不需要跳转则只需要一个节拍电位
						--LIR <= W1;
						--PCINC <= W1;
						--SHORT<= W1;
					WHEN "1001"=> --JMP
						M <= W1;
						ABUS <= W1;
						S <= "1111";
						LPC<= W1;			--JMP为无条件跳转，所以必定占用一个节拍电位来占用DBUS以更改PC
						LIR <= W2;			--再用一个节拍电位取指
						PCINC <= W2;
						--LIR <= W1;
						--PCINC <= W1;
						--SHORT<= W1;
					WHEN "1010"=> --OUT
						M<=W1;
						S<="1010";
						ABUS<=W1;
						LIR <= W1;
						PCINC <= W1;
						SHORT<= W1;
					WHEN "1011"=> --DEC(new)
						CIN<=W1;
						S<="1111";
						ABUS<=W1;
						DRW<=W1;
						LDC<=W1;
						LDZ<=W1;
						LIR <= W1;
						PCINC <= W1;
						SHORT<= W1;
					WHEN "1100"=> --SHL(new)
						CIN<=W1;
						S<="1100";
						ABUS<=W1;
						DRW<=W1;
						LDC<=W1;
						LDZ<=W1;
						LIR <= W1;
						PCINC <= W1;
						SHORT<= W1;
					WHEN "1110"=> --STP
						STOP <= W1;
					WHEN OTHERS => NULL;
				END CASE;
			WHEN OTHERS => NULL;
		END CASE;
	END PROCESS;
END behavior;